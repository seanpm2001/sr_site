---
layout: article
title: How We Made Marketo Responsive.
url: articles/tech-marketo-mobile.html
description: A technical description of how Smith &amp; Robot made Marketo templates responsive.
---
<h1 class="text-center page-title"><%= @document.title %></h1>
<p class="text-center page-subhead">
	The tech behind our responsive Marketo templates.
</p>
<p>
	Much of Marketo's success has to do with the fact that it makes it dead simple for a marketer to create landing pages, forms, track views, registrations, conversions and leads. All that, without the need to ask a developer for help, but that liberation comes with a price tag. The resulting HTML elements are absolutely positioned and that means the content is locked in the place that it was dragged, regardless of whether or not it's off the sceen of a small device.
</p>
<h2>Research</h2>
<p>
	We did find some clever <a href="http://edwardunthank.com/blog/marketo-responsive-method-marketo-double-div/">methods</a> to create responsive layouts in Marketo, but those methods didn't give marketers the content editing they needed without knowledge of HTML (or asking a grumpy developer to do it for them). Our goal was to try to give Marketers the ability to create content in a responsive way without much, if any HTML, knowledge.
</p>
<h2>In the Beginning</h2>
<p>
	To begin with we created Marketo landing page templates that were responsive. The templates had stub content in them so we would later be able to identify those pieces through class names and pull in Marketo content that was entered in by the marketer.
</p>
<h2>The Sample Setup</h2>
<p>
	The next step was to create a landing page sample based on our responsive template and set up the "fields" which would populate the dynamic content areas of the landing page. These are the elements you drag onto the page such as the rich text editor or the image. When you create a sample landing page and drag content onto the page Marketo creates a name for this element. When that piece of content is rendered into HTML the element you created is converted to an html node and given a class name that includes the name you've given it in the editor. For example if you created a rich text element named "my_element" in the editor, the resulting html node would look something like <code>&lt;p class="my_element"&gt;</code>. This gives us exactly what we need to hook into it with javascript and find it's value.
</p>
<h2>Some Code</h2>
<p>
	Once we have a sample with elements named and in place we're ready to write some javascript to move the content the marketer created into our reponsive HTML and then we're done. For the sake of simplicity, let's just say we're trying to get the content of a rich text element into an <code>&lt;h1 class="responsive-headline"&gt;</code> element in our respnsive template. Here's the code for how something like that might look:<br>
	<script src="https://gist.github.com/grommett/2c9e791881f13cbda33d.js"></script>
</p>
<p>
	As you can see from the code above it's pretty simple to put the pieces of marketer content into corresponding elements in our responsive template. We're really just moving things around. Although, this is a simple example it's the core of what we've done and it works really well. This approach has provided a great balance of technical requirements and ease of content publishing.
</p>
<p>
	Don't want to do this yourself? We're happy to help. Get in touch!
</p>
